pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION="us-east-1"
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    //     AWS_ACCESS_KEY_ID=credentials("AWS_ACCESS_KEY_ID")
    //     AWS_SECRET_ACCESS_KEY=credentials("AWS_SECRET_ACCESS_KEY")
        // PATH="$PATH:$HOME/dctlenv/bin/"
        def mvnHome = tool name: 'maven-3', type: 'maven'
        def mvnCMD = "${mvnHome}/bin/mvn"
    //     def scannerHome = tool 'sonar'
    //     JAVA_HOME='${scannerHome}/jdk'
        def dockerHome = tool 'docker'
        PATH = "${dockerHome}/bin:${env.PATH}"
    //     registry = "sundarbabu/petdemo" 
        registryCredential = 'dockerhub' 
        dockerImage = 'sundarbabu/petdemo:v3.0.0'
        def server = Artifactory.server 'artifactory'
        def rtDocker = Artifactory.docker server: server
        def ARTIFACTORY_DOCKER_REGISTRY = "devsecopsdemo.jfrog.io/default-docker-local"
        
        
     
    }
    parameters {
        choice(
            choices: ['main' , 'master'],
            description: '',
            name: 'BRANCH_NAME')
    }
    
    options {
        ansiColor('xterm')
    }

    stages {
      
        stage("Build") {
            steps {
                sh "${mvnCMD} clean install -DskipTests"
    //             sh "mvn clean install -DskipTests"
            }
        }

          


        stage("SAST Test") {
            steps {
                echo 'Static Application Security Testing under progress...'
                snykSecurity(
                snykInstallation: 'snyk',
                snykTokenId: 'snyk',
                failOnIssues: 'false'
          // place other parameters here
                )
            }
        }
                
        stage("Build Docker Image") {
            steps {
                script {
                    docker.build(ARTIFACTORY_DOCKER_REGISTRY + '/petdemo:v3.0.0')
                } 
            }
        }

        stage ('Push image to Artifactory') {
            steps {
                rtDockerPush(
                    serverId: "artifactory",
                    image: ARTIFACTORY_DOCKER_REGISTRY + '/petdemo:v3.0.0',
                    targetRepo: 'default-docker-local',
                    // Attach custom properties to the published artifacts:
                    properties: 'project-name=docker1;status=stable'
                )
            }
        }
    
        stage("E-mail Build Status") {
            steps {
                emailext (attachLog: false, body: 'Jenkins Build E-mail Test', subject: 'Jenkins Build E-mail Test', to: 'sundar_babu@hotmail.com')
            } 
        }
        
        
    }
}

