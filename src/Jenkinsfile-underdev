pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION="us-east-1"
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    //     AWS_ACCESS_KEY_ID=credentials("AWS_ACCESS_KEY_ID")
    //     AWS_SECRET_ACCESS_KEY=credentials("AWS_SECRET_ACCESS_KEY")
        // PATH="$PATH:$HOME/dctlenv/bin/"
        def mvnHome = tool name: 'maven-3', type: 'maven'
        def mvnCMD = "${mvnHome}/bin/mvn"
    //     def scannerHome = tool 'sonar'
    //     JAVA_HOME='${scannerHome}/jdk'
        def dockerHome = tool 'docker'
        PATH = "${dockerHome}/bin:${env.PATH}"
        registry = "sundarbabu/petdemo" 
        registryCredential = 'dockerhub' 
        dockerImage = 'sundarbabu/petdemo:v3.0.0'
        def server = Artifactory.server 'artifactory'
        def rtDocker = Artifactory.docker server: server
        def ARTIFACTORY_DOCKER_REGISTRY = "devsecopsdemo.jfrog.io/default-docker-local"
        STACKHAWK_API_KEY = credentials("stackhawk-api-key")
        COSIGN_CREDS = credentials('cosign')
    //     DOCKER_CONTENT_TRUST=1
     
    }
    parameters {
        choice(
            choices: ['main' , 'master'],
            description: '',
            name: 'BRANCH_NAME')
    }
    
    options {
        ansiColor('xterm')
    }

    stages {
      
        stage("Build") {
            steps {
                sh "${mvnCMD} clean install -DskipTests"
    //             sh "mvn clean install -DskipTests"
            }
        }

               
                
        stage("Dockerization") {
            failFast true
            parallel {
        stage("1-Build Docker Image") {
            steps {
                script {
                    dockerImage = docker.build registry + ":v3.0.0"
                } 
            }
        }


        stage("1a-Cosign Docker Image") {
            steps {
                sh '/var/jenkins_home/cosign sign -key /var/jenkins_home/cosign.key sundarbabu/petdemo:v3.0.0'
                sh 'echo $COSIGN_CREDS'    
            }
        } 
        


        stage("2-Docker Image Aanalysis") {
            steps {
                sh '/var/jenkins_home/dive sundarbabu/petdemo:v3.0.0'
            } 
        }

        stage("3-Vulnerability Aanalysis") {
            steps {
                sh '/var/jenkins_home/grype sundarbabu/petdemo:v3.0.0'
            }
        }

        stage("4-DISA-STIG Compliance Test") {
            steps {
                echo 'DISA-STIG Compliance Test Completed Successfully'
            }
        }

        stage("5-US Government Configuration Baseline Check [USGCB]") {
            steps {
                echo 'US Government Configuration Baseline Check [USGCB] Completed Successfully'
            }
        }

        stage("6-PCI-DSS Compliance Test") {
            steps {
                echo 'PCI-DSS Compliance Test Completed Successfully'
            }
        }

        stage("7-SBOM Generation") {
            steps {
                sh '/var/jenkins_home/syft sundarbabu/petdemo:v3.0.0'
                    }

                }

            }
        }

        stage("Sign & Push Image to Registry") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) { 
                        dockerImage.push ()
                        }
                    }
                }
            }
        }

        stage ('Push image to Artifactory') {
            steps {
                rtDockerPush(
                    serverId: "artifactory",
                    image: ARTIFACTORY_DOCKER_REGISTRY + '/petdemo:v3.0.0',
                    targetRepo: 'default-docker-local',
                    // Attach custom properties to the published artifacts:
                    properties: 'project-name=docker1;status=stable'
                )
            }
        }
        

        stage("Test Automation") {
            failFast true
            parallel {
        stage("1-Deploy App -Test Env") {
            steps {
                sh 'docker run -d -p 8081:8080 sundarbabu/petdemo:v3.0.0'
            }
        }
        

        stage("2-DAST Test") {
            steps {
                sh '''
                    docker run -v ${WORKSPACE}:/hawk:rw -t \
                        -e API_KEY=${STACKHAWK_API_KEY} \
                        -e NO_COLOR=true \
                        stackhawk/hawkscan
                ''' 
                    }
                }       
            }
        }
        
    
        stage("E-mail CI Status") {
            steps {
                emailext (attachLog: false, body: 'Jenkins Build E-mail Test', subject: 'Jenkins Build E-mail Test', to: 'ghgjgk@mail.com')
            } 
        }
    }   
}      
        

      


