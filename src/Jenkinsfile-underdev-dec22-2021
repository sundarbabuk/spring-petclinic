pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION="us-east-1"
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    //     AWS_ACCESS_KEY_ID=credentials("AWS_ACCESS_KEY_ID")
    //     AWS_SECRET_ACCESS_KEY=credentials("AWS_SECRET_ACCESS_KEY")
        // PATH="$PATH:$HOME/dctlenv/bin/"
        def mvnHome = tool name: 'maven-3', type: 'maven'
        def mvnCMD = "${mvnHome}/bin/mvn"
    //     def scannerHome = tool 'sonar'
    //     JAVA_HOME='${scannerHome}/jdk'
        def dockerHome = tool 'docker'
        PATH = "${dockerHome}/bin:${env.PATH}"
        registry = "sundarbabu/petdemo" 
        registryCredential = 'dockerhub' 
        dockerImage = 'sundarbabu/petdemo:v3.0.0'
        def server = Artifactory.server 'artifactory'
        def rtDocker = Artifactory.docker server: server
        def ARTIFACTORY_DOCKER_REGISTRY = "devsecopsdemo.jfrog.io/default-docker-local"
        STACKHAWK_API_KEY = credentials("stackhawk-api-key")
    //     DOCKER_CONTENT_TRUST=1
        GITHUB_TOKEN=credentials('ghcr-token')
        IMAGE_NAME='sundarbabuk/spring-petclinic'
        IMAGE_VERSION='1.0-001'
        COSIGN_PASSWORD=credentials('cosign-password')
        COSIGN_PRIVATE_KEY=credentials('cosign-private-key')
        COSIGN_PUBLIC_KEY=credentials('cosign-public-key')
     
    }
    parameters {
        choice(
            choices: ['main' , 'master'],
            description: '',
            name: 'BRANCH_NAME')
    }
    
    options {
        ansiColor('xterm')
    }

    stages {
      
        stage("Build") {
            steps {
                sh "${mvnCMD} clean install -DskipTests"
    //             sh "mvn clean install -DskipTests"
            }
        }

           
        stage("Dockerization") {
            failFast true
            parallel {
        stage("1-Build Docker Image") {
            steps {
                sh 'docker build -t $IMAGE_NAME:$IMAGE_VERSION .'
    ///             script {
    ///                 dockerImage = docker.build registry + ":v3.0.0"
                } 
            }
        }

    ///     stage("Trivy Vulnerability Scan") {
    ///         steps {
    //             sh '/var/jenkins_home/trivy --no-progress --exit-code 1 --severity MEDIUM,HIGH,CRITICAL sundarbabu/petdemo:v3.0.0'
    ///             sh '/var/jenkins_home/trivy sundarbabu/petdemo:v3.0.0'
    ///                 }
    ///             }
            }
        }

    ///    stage('Login to GHCR') {
    ///        steps {
    ///            sh 'echo $GITHUB_TOKEN_PSW | docker login ghcr.io -u USERNAME --password-stdin'
    ///        }
    ///    }


        stage("Sign & Push Image to Registry") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) { 
                        sh '/var/jenkins_home/cosign version'
                        sh '/var/jenkins_home/cosign sign --key $COSIGN_PRIVATE_KEY $IMAGE_NAME:$IMAGE_VERSION .'
                            dockerImage.push ()
    ///                     sh '/var/jenkins_home/cosign verify --key $COSIGN_PUBLIC_KEY sundarbabu/petdemo:v3.0.0'
                        }
                    }
                }
            }
        }

        stage ('Push image to Artifactory') {
            steps {
                rtDockerPush(
                    serverId: "artifactory",
                    image: ARTIFACTORY_DOCKER_REGISTRY + '/petdemo:v3.0.0',
                    targetRepo: 'default-docker-local',
                    // Attach custom properties to the published artifacts:
                    properties: 'project-name=docker1;status=stable'
                )
            }
        }

    
        stage("E-mail CI Status") {
            steps {
                emailext (attachLog: false, body: 'Jenkins Build E-mail Test', subject: 'Jenkins Build E-mail Test', to: 'sundar_babu@hotmail.com')
            } 
        }
    }   
}      
        

    //     stage('Cleaning up Registry') { 
    //         steps { 
    //             sh "docker rmi $registry:$BUILD_NUMBER"
    //             sh "docker rmi $registry:v1.0.0"
    //         }
    //     }
                


