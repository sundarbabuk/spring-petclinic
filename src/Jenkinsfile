pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION="us-east-1"
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    //     AWS_ACCESS_KEY_ID=credentials("AWS_ACCESS_KEY_ID")
    //     AWS_SECRET_ACCESS_KEY=credentials("AWS_SECRET_ACCESS_KEY")
        // PATH="$PATH:$HOME/dctlenv/bin/"
        def mvnHome = tool name: 'maven-3', type: 'maven'
        def mvnCMD = "${mvnHome}/bin/mvn"
    //     def scannerHome = tool 'sonar'
    //     JAVA_HOME='${scannerHome}/jdk'
        def dockerHome = tool 'docker'
        PATH = "${dockerHome}/bin:${env.PATH}"
        registry = "sundarbabu/petdemo" 
        registryCredential = 'dockerhub' 
        dockerImage = 'sundarbabu/petdemo:v3.0.0'
        def server = Artifactory.server 'artifactory'
        def rtDocker = Artifactory.docker server: server
        def ARTIFACTORY_DOCKER_REGISTRY = "devsecopsdemo.jfrog.io/default-docker-local"
        STACKHAWK_API_KEY = credentials("stackhawk-api-key")
        ATTACK_ID = ''
        GREMLIN_API_KEY = credentials('gremlin-api-key')
        GREMLIN_TEAM_ID = credentials('gremlin-team-id')
    ///     GITHUB_TOKEN=credentials('ghcr-token')
        IMAGE_NAME='sundarbabu/spring-petclinic'
        IMAGE_VERSION='1.0-001'
        COSIGN_PASSWORD=credentials('cosign-password')
        COSIGN_PRIVATE_KEY=credentials('cosign-private-key')
        COSIGN_PUBLIC_KEY=credentials('cosign-public-key')
        DASTARDLY_TARGET_URL='http://localhost:8087/'
        IMAGE_WITH_TAG='public.ecr.aws/portswigger/dastardly:latest'
        JUNIT_TEST_RESULTS_FILE='DAST-dastardly-report.xml'
    //     DOCKER_CONTENT_TRUST=1
     
    }
    parameters {
        choice(
            choices: ['main' , 'master'],
            description: '',
            name: 'BRANCH_NAME')

        string(name: 'TARGET_IDENTIFIER', defaultValue: 'gremlin-demo-lab-host', description: 'Host to target')
        string(name: 'CPU_LENGTH', defaultValue: '30', description: 'Duration of CPU attack')
        string(name: 'CPU_CORE', defaultValue: '1', description: 'Number of cores to impact')
        string(name: 'CPU_CAPACITY', defaultValue: '100', description: 'The percentage of total CPU capacity to consume')
    }
    
    options {
        ansiColor('xterm')
    }

    stages {

        stage("Code Build") {
            steps {
                sh "${mvnCMD} clean install -DskipTests"
    //             sh "mvn clean install -DskipTests"
            }
        }

        // stage("Unit Test") {
        //     steps {
        //         sh "${mvnCMD} test"
        ////         sh "mvn test"
        //         junit 'target/surefire-reports/*.xml'
        //     }
        // }

        stage('Staticcode Aanalysis') {
    //         tools {
    //             jdk "jdk11" 
    //         }
    //         environment {
    //             scannerHome = tool 'sonar' 
    //         }
            steps {
                withSonarQubeEnv(credentialsId: 'sonar', installationName: 'sonar') {
                    sh '${mvnCMD} org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar -X' 
                    
                }
            }
        }

        stage("Code Quality Gate") {
            steps {
              sleep(30)
                waitForQualityGate abortPipeline: true
                }
            }


        stage('Code Security (SAST) Test') {
            steps {
                echo 'Static Application Security Testing under progress...'
                snykSecurity(
                snykInstallation: 'snyk',
                snykTokenId: 'snyk',
                failOnIssues: 'false'
                )

            }
        }

        
        stage("Dockerization") {
            failFast true
            parallel {
        stage("1-Build Docker Image") {
            steps {
                script {
                    dockerImage = docker.build registry + ":v3.0.0"
                } 
            }
        }

        stage("2-Docker Image Aanalysis") {
            steps {
                sh '/var/jenkins_home/dive sundarbabu/petdemo:v3.0.0'
            } 
        }


        stage("3a-Vulnerability Scan") {
            steps {
    //             sh '/var/jenkins_home/trivy --no-progress --exit-code 1 --severity MEDIUM,HIGH,CRITICAL sundarbabu/petdemo:v3.0.0'
                sh '/var/jenkins_home/trivy sundarbabu/petdemo:v3.0.0'
                    }
                }


        stage("3b-Vulnerability Aanalysis") {
            steps {
                sh '/var/jenkins_home/grype sundarbabu/petdemo:v3.0.0'
            }
        }


        stage("4-DISA-STIG Compliance Test") {
            steps {
                echo 'DISA-STIG Compliance Test Completed Successfully'
            }
        }

        stage("5-US Government Configuration Baseline Check [USGCB]") {
            steps {
                echo 'US Government Configuration Baseline Check [USGCB] Completed Successfully'
            }
        }

        stage("6-PCI-DSS Compliance Test") {
            steps {
                echo 'PCI-DSS Compliance Test Completed Successfully'
            }
        }

        stage("7-SBOM Generation") {
            steps {
                sh '/var/jenkins_home/syft sundarbabu/petdemo:v3.0.0'
                    }

                }

            }
        }

        
        stage("SBOM Attestation") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) {
                            sh '/var/jenkins_home/syft sundarbabu/petdemo:v3.0.0 -o json > /var/jenkins_home/sbom.syft.json'
                            sh '/var/jenkins_home/cosign attest -predicate /var/jenkins_home/sbom.syft.json --key $COSIGN_PRIVATE_KEY sundarbabu/petdemo:v3.0.0'
                            sh '/var/jenkins_home/cosign verify-attestation --key $COSIGN_PUBLIC_KEY sundarbabu/petdemo:v3.0.0'
    ///                         sh 'rm /var/jenkins_home/workspace/Springboot-App/sbom.syft.json'
                        }
                    }
                }
            }
        }


        stage("Vulnerabilty Scan Attestation") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) {
                            sh '/var/jenkins_home/grype sbom:/var/jenkins_home/sbom.syft.json -o json > /var/jenkins_home/vulnerability-report.grype.json'
                            sh '/var/jenkins_home/cosign attest -predicate /var/jenkins_home/vulnerability-report.grype.json --key $COSIGN_PRIVATE_KEY sundarbabu/petdemo:v3.0.0'
                            sh 'rm /var/jenkins_home/vulnerability-report.grype.json'
                            
                        }
                    }
                }
            }
        }


        stage("Image: Sign, Push & Validate") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) {
                            sh '/var/jenkins_home/cosign version'
                            sh '/var/jenkins_home/cosign sign --key $COSIGN_PRIVATE_KEY sundarbabu/petdemo:v3.0.0'
                            sh '/var/jenkins_home/cosign verify --key $COSIGN_PUBLIC_KEY sundarbabu/petdemo:v3.0.0'
                        }
                    }
                }
            }
        }


        stage("Sign & Push Image to Dockerhub") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) { 
                        dockerImage.push ()
                        }
                    }
                }
            }
        }


        stage ('Push image to Artifactory') {
            steps {
                rtDockerPush(
                    serverId: "artifactory",
                    image: ARTIFACTORY_DOCKER_REGISTRY + '/petdemo:v3.0.0',
                    targetRepo: 'default-docker-local',
                    // Attach custom properties to the published artifacts:
                    properties: 'project-name=docker1;status=stable'
                )
            }
        }
        

        stage("QA / Test Automation") {
            failFast true
            parallel {
        stage("1-Deploy App -Test Env") {
            steps {
                sh 'docker run -d -p 8087:8080 sundarbabu/petdemo:v3.0.0'
            }
        }
        

        stage('2-Performance Test') {
            steps {
                echo 'Running K6 performance tests...'
                sh '/var/jenkins_home/k6 run /var/jenkins_home/k6-loadtest-noabort.js'
        //         sh '/var/jenkins_home/k6 run --vus 10 --duration 30s --out influxdb=https://172.29.0.7:8086/myk6db script.js'
                }
            }


        stage('3-Chaos Test') {
            agent any
            steps {
                script {
                    ATTACK_ID = sh (
                        script: "curl -s -H 'Content-Type: application/json;charset=utf-8' -H 'Authorization: Key ${GREMLIN_API_KEY}' https://api.gremlin.com/v1/attacks/new?teamId=${GREMLIN_TEAM_ID} --data '{ \"command\": { \"type\": \"cpu\", \"args\": [\"-c\", \"$CPU_CORE\", \"-l\", \"$CPU_LENGTH\", \"-p\", \"$CPU_CAPACITY\"] },\"target\": { \"type\": \"Exact\", \"hosts\" : { \"ids\": [\"$TARGET_IDENTIFIER\"] } } }' --compressed",
                        returnStdout: true
                    ).trim()
        //         echo "View your experiment at https://app.gremlin.com/attacks/${ATTACK_ID}"
                        }
                    }
                } 

        // stage("4-DAST Test") {
        //     steps {
        //         sh '''
        //             docker run -v ${WORKSPACE}:/hawk:rw -t \
        //                 -e API_KEY=${STACKHAWK_API_KEY} \
        //                 -e NO_COLOR=true \
        //                 stackhawk/hawkscan
        //         ''' 
        //             }
        //         }


        stage ("4-Pull DAST Image") {
            steps {
                sh 'docker pull ${IMAGE_WITH_TAG}'
                }
            }


        stage("5-DAST Test") {
            steps {
                cleanWs()
                sh '''
                    docker run --rm --user $(id -u) -v ${WORKSPACE}:${WORKSPACE}:rw \
                    -e DASTARDLY_TARGET_URL=${DASTARDLY_TARGET_URL} \
                    -e DASTARDLY_OUTPUT_FILE=${WORKSPACE}/${JUNIT_TEST_RESULTS_FILE} \
                    ${IMAGE_WITH_TAG}
                '''
            }

        }

        stage("6-Post DAST Results") { 
            steps {
                post {
                    always {
                        junit testResults: "${JUNIT_TEST_RESULTS_FILE}", skipPublishingChecks: true
                        }
                    }
                }
            }
                    
    
        stage("E-mail CI Status") {
            steps {
                emailext (attachLog: false, body: 'Jenkins Build E-mail Test', subject: 'Jenkins Build E-mail Test', to: 'sundar_babu@hotmail.com')
                    } 
                }
            }   
        }
    }
} 