pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION="us-east-1"
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    //     AWS_ACCESS_KEY_ID=credentials("AWS_ACCESS_KEY_ID")
    //     AWS_SECRET_ACCESS_KEY=credentials("AWS_SECRET_ACCESS_KEY")
        // PATH="$PATH:$HOME/dctlenv/bin/"
        def mvnHome = tool name: 'maven-3', type: 'maven'
        def mvnCMD = "${mvnHome}/bin/mvn"
    //     def scannerHome = tool 'sonar'
    //     JAVA_HOME='${scannerHome}/jdk'
        def dockerHome = tool 'docker'
        PATH = "${dockerHome}/bin:${env.PATH}"
        registry = "sundarbabu/petdemo" 
        registryCredential = 'dockerhub' 
        dockerImage = 'sundarbabu/petdemo:v1.0.0'
        DOCKER_CONTENT_TRUST=1
     
    }
    parameters {
        choice(
            choices: ['main' , 'master'],
            description: '',
            name: 'BRANCH_NAME')
    }
    
    options {
        ansiColor('xterm')
    }

    stages {
      
        stage("Build") {
            steps {
                sh "${mvnCMD} clean install -DskipTests"
    //             sh "mvn clean install -DskipTests"
            }
        }

        stage("Unit Test") {
            steps {
                sh "${mvnCMD} test"
        //         sh "mvn test"
                junit 'target/surefire-reports/*.xml'
            }
        }

        stage('Staticcode Aanalysis') {
    //         tools {
    //             jdk "jdk11" 
    //         }
    //         environment {
    //             scannerHome = tool 'sonar' 
    //         }
            steps {
                withSonarQubeEnv(credentialsId: 'sonar', installationName: 'sonar') {
                    sh '${mvnCMD} org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar -X' 
                    
                }
            }
        }

        stage("Quality Gate") {
            steps {
              sleep(60)
                waitForQualityGate abortPipeline: true
                }
            }
        

        
        stage("Dockerization") {
            failFast true
            parallel {
        stage("1-Build Docker Image") {
            steps {
                script {
                    dockerImage = docker.build registry + ":v1.0.0"
                } 
            }
        }

        stage("2-Docker Image Aanalysis") {
            steps {
                sh '/var/jenkins_home/dive sundarbabu/petdemo:v1.0.0'
            } 
        }

        stage("3-Vulnerability Aanalysis") {
            steps {
                sh '/var/jenkins_home/grype sundarbabu/petdemo:v1.0.0'
            }
        }

        stage("4-SBOM Generation") {
            steps {
                sh '/var/jenkins_home/syft sundarbabu/petdemo:v1.0.0'
                    }

                }

            }
        }

        stage("Sign & Push Image to Registry") {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry( '', 'dockerhub' ) { 
                        dockerImage.push ()
                        }
                    }
                }
            }
        }
    }   
}      
        

    //     stage('Cleaning up Registry') { 
    //         steps { 
    //             sh "docker rmi $registry:$BUILD_NUMBER"
    //             sh "docker rmi $registry:v1.0.0"
    //         }
    //     }
                


